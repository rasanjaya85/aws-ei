# Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  WSO2 Enterprise Integrator Clustered deployment with Analytics Configured
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Basic Configuration
        Parameters:
          - AWSAccessKeyId
          - AWSAccessKeySecret
          - KeyPairName
          - WSO2InstanceType
          - CertificateName
          - DBUsername
          - DBPassword
          - WUMUsername
          - WUMPassword
      - Label:
          default: Advanced Configuration
        Parameters:
          - OperatingSystem
          - ProductVersion
          - DB
          - DBAllocationStorage
          - DBInstanceType
          - CustomUserData
          - JDK
          - InternalPrepareForTest
          - ElasticSearchEndpoint
          - ElasticSearchRegion
    ParameterLabels:
      AWSAccessKeyId:
        default: AWS Access Key
      AWSAccessKeySecret:
        default: AWS Access Secret Key
      OperatingSystem:
        default: Operating System
      CertificateName:
        default: SSL Certificate Name
      KeyPairName:
        default: Key Pair Name
      DBUsername:
        default: Database Username
      DBPassword:
        default: Database Password
      DBAllocationStorage:
        default: Allocation Storage
      DBInstanceType:
        default: Database Instance Type
      JDK:
        default: JDK
      InternalPrepareForTest:
        default: Enable Test Mode
      CustomUserData:
        default: Custom Userdata
      WUMUsername:
        default: WSO2 Username
      WUMPassword:
        default: WSO2 Password
      WSO2InstanceType:
        default: Instance Type
      DB:
        default: Database
      ProductVersion:
        default: EI Version
      ElasticSearchEndpoint:
        default: ElasticSearch Endpoint
      ElasticSearchRegion:
        default: ElasticSearch Region
Resources:
  MonitoringInstanceIAMRole:
    Type: AWS::IAM::Role
    Description: IAM Instance role to read AWS resource to discover instances to monitor
    Properties:
      RoleName: MonitoringInstanceIAMRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: sts:AssumeRole
      Path: /
  MonitoringInstanceIAMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: MonitoringInstanceIAMRole
  MonitoringInstanceIAMPolicy:
    Type: AWS::IAM::Policy
    DependsOn: MonitoringInstanceIAMRole
    Description: Read AWS resources to discover instances to monitor
    Properties:
      PolicyName: MonitoringInstanceReadPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: '1'
            Effect: Allow
            Action:
              - elasticloadbalancing:Describe*
              - ec2:Describe*
            Resource: "*"
      Roles: [!Ref MonitoringInstanceIAMRole]
  # networking configurations
  WSO2EIVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  WSO2EIPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2EIVPC
      CidrBlock: 10.0.254.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  WSO2EIPublicSubnet2:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref WSO2EIVPC
        CidrBlock: 10.0.252.0/24
        AvailabilityZone: !Select
          - '1'
          - !GetAZs ''
  WSO2EIPublicInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  WSO2EIPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2EIVPC
  WSO2EIPublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2EIPublicRouteTable
      SubnetId: !Ref WSO2EIPublicSubnet1
  WSO2EIPublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2EIPublicRouteTable
      SubnetId: !Ref WSO2EIPublicSubnet2
  WSO2EIPublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref WSO2EIPublicRouteTable
      GatewayId: !Ref WSO2EIPublicInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
    DependsOn: WSO2EIVPCInternetGatewayAttachment
  WSO2EIVPCInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref WSO2EIPublicInternetGateway
      VpcId: !Ref WSO2EIVPC
  WSO2EIPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2EIVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  WSO2EIPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2EIVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
  WSO2EIPrivateSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2EIVPC
  WSO2EIPrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref WSO2EINATGateway
      RouteTableId: !Ref WSO2EIPrivateSubnetRouteTable
  WSO2EIPrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2EIPrivateSubnetRouteTable
      SubnetId: !Ref WSO2EIPrivateSubnet1
  WSO2EIPrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2EIPrivateSubnetRouteTable
      SubnetId: !Ref WSO2EIPrivateSubnet2
  WSO2EINATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt
        - WSO2EIEIP
        - AllocationId
      SubnetId: !Ref WSO2EIPublicSubnet1
  WSO2EIEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  # database configurations
  WSO2EIDBInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: DB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '1521'
          ToPort: '1521'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '1433'
          ToPort: '1433'
          CidrIp: 0.0.0.0/0
  WSO2EIDBInstance:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Snapshot
    Properties:
      VPCSecurityGroups:
        - !Ref WSO2EIDBInstanceSecurityGroup
      DBInstanceClass: !Ref DBInstanceType
      AllocatedStorage: !Ref DBAllocationStorage
      BackupRetentionPeriod: '0'
      DBInstanceIdentifier: WSO2EIDBInstance
      DBName: !If [UseSQLServerDB, "", WSO2EIDB]
      LicenseModel: !If [UseLicensedVersion, license-included, !Ref 'AWS::NoValue']
      EngineVersion: !Select [1, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
      Engine: !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: 'false'
      StorageType: gp2
      DBSubnetGroupName: !Ref WSO2EIDBSubnetGroup
  WSO2EIDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds:
        - !Ref WSO2EIPrivateSubnet1
        - !Ref WSO2EIPrivateSubnet2
  # File system configurations
  WSO2EIEFSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: EFS Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0
  WSO2EIEFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
  WSO2EIPrivateSubnet1EFSMountTarget:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref WSO2EIPrivateSubnet1
      FileSystemId: !Ref WSO2EIEFSFileSystem
      SecurityGroups:
        - !Ref WSO2EIEFSSecurityGroup
  WSO2EIPrivateSubnet2EFSMountTarget:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref WSO2EIPrivateSubnet2
      FileSystemId: !Ref WSO2EIEFSFileSystem
      SecurityGroups:
        - !Ref WSO2EIEFSSecurityGroup
  # Product configurations
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: WSO2 Bastion node Security Group
      GroupName: WSO2BastionSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  MonitoringSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: WSO2 Bastion node Security Group
      GroupName: WSO2MonitoringSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
  WSO2EISecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: WSO2 Enterprise Integrator Security Group
      GroupName: WSO2SecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9100
          ToPort: 9100
          SourceSecurityGroupId: !Ref MonitoringSecurityGroup
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          SourceSecurityGroupId: !Ref MonitoringSecurityGroup
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '5672'
          ToPort: '5672'
          SourceSecurityGroupId: !Ref WSO2EILoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '5701'
          ToPort: '5701'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4000'
          ToPort: '4000'
          CidrIp: 0.0.0.0/0
  WSO2BastionInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - WSO2EIAMIRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu1804
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: WSO2BastionInstance
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          AssociatePublicIpAddress : 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2EIPublicSubnet1
          GroupSet:
            - !Ref BastionSecurityGroup
  PuppetMaster:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - WSO2PuppetMasterRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu1804
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: PuppetMasterInstance
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2EIPrivateSubnet1
          GroupSet:
            - !Ref PuppetMasterSecurityGroup
      UserData: !Base64
        'Fn::Join':
          - |+

          - - '#!/bin/bash'
            - 'export PATH=~/.local/bin:$PATH'
            - exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            - apt-get update
            - apt-get -y install python-setuptools python-pip
            - pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            - echo "> Set hostname to puppetmaster"
            - hostname puppetmaster
            - echo $(hostname) >> /etc/hostname
            - echo "127.0.0.1 $(hostname) puppet" >> /etc/hosts
            - !Join
              - ''
              - - sed -i "s/access-key/
                - !Ref AWSAccessKeyId
                - /g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - !Join
              - ''
              - - sed -i "s/REGION_NAME/
                - !Ref ElasticSearchRegion
                - /g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - !Join
              - ''
              - - sed -i "s^secret-key^
                - !Ref AWSAccessKeySecret
                - ^g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - !Join
              - ''
              - - sed -i "s^STACK_NAME^
                - !Ref AWS::StackName
                - ^g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - !Join
              - ''
              - - sed -i "s^ELASTICSEARCH_ENDPOINT^
                - !Ref ElasticSearchEndpoint
                - ^g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - export INSTANCEID=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
            - sed -i "s/INSTANCE_ID/$INSTANCEID/g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - apt-get update
            - apt install openjdk-8-jre-headless -y
            - nohup /usr/lib/logstash-6.5.1/bin/logstash -f /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf & >> /home/ubuntu/elastic.log
            - sed -i '/\[main\]/a dns_alt_names=puppetmaster,puppet' /etc/puppet/puppet.conf
            - sed -i '/\[master\]/a autosign=true' /etc/puppet/puppet.conf
            - !Join
              - ''
              - - export ProductVersion=
                - !Ref ProductVersion
            - service puppetmaster restart
            # - !Sub "/home/ubuntu/wso2-init.sh '${WUMUsername}' '${WUMPassword}' wso2ei-${ProductVersion} '${InternalPrepareForTest}'"
            - !Join
              - ''
              - - sed -i "s/access-key/
                - !Ref AWSAccessKeyId
                - /g" /etc/puppet/code/environments/production/modules/ei_integrator650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/REGION_NAME/
                - !Ref "AWS::Region"
                - /g" /etc/puppet/code/environments/production/modules/ei_integrator650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s^secretkey^
                - !Ref AWSAccessKeySecret
                - ^g" /etc/puppet/code/environments/production/modules/ei_integrator650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_ELB_DNS_NAME/
                - !GetAtt
                  - WSO2EILoadBalancer
                  - DNSName
                - >-
                  /g"
                  /etc/puppet/code/environments/production/modules/ei_integrator650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /etc/puppet/code/environments/production/modules/ei_integrator650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /etc/puppet/code/environments/production/modules/ei_integrator650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DBMS/
                - !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /etc/puppet/code/environments/production/modules/ei_integrator650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_RDS_URL/
                - !GetAtt
                  - WSO2EIDBInstance
                  - Endpoint.Address
                - /g" /etc/puppet/code/environments/production/modules/ei_integrator650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /etc/puppet/code/environments/production/modules/ei_analytics_worker650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /etc/puppet/code/environments/production/modules/ei_analytics_worker650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DBMS/
                - !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /etc/puppet/code/environments/production/modules/ei_analytics_worker650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_RDS_URL/
                - !GetAtt
                  - WSO2EIDBInstance
                  - Endpoint.Address
                - /g" /etc/puppet/code/environments/production/modules/ei_analytics_worker650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /etc/puppet/code/environments/production/modules/ei_analytics_dashboard650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /etc/puppet/code/environments/production/modules/ei_analytics_dashboard650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DBMS/
                - !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /etc/puppet/code/environments/production/modules/ei_analytics_dashboard650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_RDS_URL/
                - !GetAtt
                  - WSO2EIDBInstance
                  - Endpoint.Address
                - /g" /etc/puppet/code/environments/production/modules/ei_analytics_dashboard650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/BROKER_ELB_DNS_NAME/
                - localhost
                - /g" /etc/puppet/code/environments/production/modules/ei_integrator650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/ACTIVEMQ_HOSTNAME/
                - localhost
                - /g" /etc/puppet/code/environments/production/modules/ei_integrator650_master/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/RABBITMQ_HOSTNAME/
                - localhost
                - /g" /etc/puppet/code/environments/production/modules/ei_integrator650_master/manifests/params.pp
            - export DB_NAME=WSO2EIDB
            - !Join
              - ''
              - - export DB_HOSTNAME=
                - !GetAtt
                  - WSO2EIDBInstance
                  - Endpoint.Address
            - !Join
              - ''
              - - export DB_PORT=
                - !GetAtt
                  - WSO2EIDBInstance
                  - Endpoint.Port
            - !Join
              - ''
              - - export DB_USERNAME=
                - !Ref DBUsername
            - !Join
              - ''
              - - export DB_PASSWORD=
                - !Ref DBPassword
            - !Join
             - ''
             - - sed -i "s/JDK_TYPE/
               - !Ref JDK
               - /g" /etc/puppet/code/environments/production/modules/ei_analytics_dashboard650/manifests/params.pp
            - !Join
             - ''
             - - sed -i "s/JDK_TYPE/
               - !Ref JDK
               - /g" /etc/puppet/code/environments/production/modules/ei_analytics_worker650/manifests/params.pp
            - !Join
             - ''
             - - sed -i "s/JDK_TYPE/
               - !Ref JDK
               - /g" /etc/puppet/code/environments/production/modules/ei_integrator650/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /usr/local/bin/provision_db_ei.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /usr/local/bin/provision_db_ei.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_HOST/
                - !GetAtt
                  - WSO2EIDBInstance
                  - Endpoint.Address
                - /g" /usr/local/bin/provision_db_ei.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PORT/
                - !GetAtt
                  - WSO2EIDBInstance
                  - Endpoint.Port
                - /g" /usr/local/bin/provision_db_ei.sh
            - !Join
              - ''
              - - sed -i "s/CF_DBMS_NAME/
                - !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /usr/local/bin/provision_db_ei.sh
            - !Join
              - ''
              - - sed -i "s/CF_DBMS_VERSION/
                - !Select [1, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /usr/local/bin/provision_db_ei.sh
            - !Join
              - ''
              - - sed -i "s/CF_PRODUCT_VERSION/
                - 6.5.0
                - /g" /usr/local/bin/provision_db_ei.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /usr/local/bin/provision_db_ei-analytics.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /usr/local/bin/provision_db_ei-analytics.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_HOST/
                - !GetAtt
                  - WSO2EIDBInstance
                  - Endpoint.Address
                - /g" /usr/local/bin/provision_db_ei-analytics.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PORT/
                - !GetAtt
                  - WSO2EIDBInstance
                  - Endpoint.Port
                - /g" /usr/local/bin/provision_db_ei-analytics.sh
            - !Join
              - ''
              - - sed -i "s/CF_DBMS_NAME/
                - !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /usr/local/bin/provision_db_ei-analytics.sh
            - !Join
              - ''
              - - sed -i "s/CF_DBMS_VERSION/
                - !Select [1, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /usr/local/bin/provision_db_ei-analytics.sh
            - !Join
              - ''
              - - sed -i "s/CF_PRODUCT_VERSION/
                - 6.5.0
                - /g" /usr/local/bin/provision_db_ei-analytics.sh
            - bash /usr/local/bin/provision_db_ei.sh
            - bash /usr/local/bin/provision_db_ei-analytics.sh
            - cd /home/ubuntu
            - !Sub "./wso2-init.sh '${WUMUsername}' '${WUMPassword}' wso2ei-6.5.0 ${InternalPrepareForTest} ei_integrator650_master"
            - !Sub "/usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource PuppetMaster --region ${AWS::Region}"
            - !Sub "./wso2-init.sh '${WUMUsername}' '${WUMPassword}' wso2ei-6.5.0 ${InternalPrepareForTest} ei_analytics_worker650_master"
            - !Sub "./wso2-init.sh '${WUMUsername}' '${WUMPassword}' wso2ei-6.5.0 ${InternalPrepareForTest} ei_analytics_dashboard650_master"
  PuppetMasterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: WSO2 PuppetMaster Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: 0.0.0.0/0
  WSO2EINode1LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2EIAMIRegionMap
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref WSO2InstanceType
      IamInstanceProfile: !Ref MonitoringInstanceIAMProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2EISecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          export PATH=~/.local/bin:$PATH
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              export DEBIAN_FRONTEND=noninteractive
              apt-get update
              apt install -y puppet nfs-common
              apt install -y python-pip
              pip install boto3
              sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              yum install -y epel-release zip unzip nfs-utils
              yum install -y python-pip
              pip install boto3
              rpm -Uvh https://yum.puppetlabs.com/puppet5/puppet5-release-el-7.noarch.rpm
              yum install -y puppet-agent
              echo $'[main]\nserver = puppet\ncertname = agent1\nenvironment = production\n\runinterval = 1h' > /etc/puppetlabs/puppet/puppet.conf
          fi
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          wget --no-check-certificate --no-proxy 'http://wso2-cloudformation-templates.s3.amazonaws.com/private_ip_extractor.py' -P /usr/local/bin/
          wget --no-check-certificate --no-proxy 'http://wso2-cloudformation-templates.s3.amazonaws.com/logstash-ei.conf' -P /usr/lib/logstash-6.5.1/
          wget https://s3.amazonaws.com/wso2logarchiever/log_archiver/log_archiver.sh
          mv log_archiver.sh /usr/lib/
          export ProductVersion=6.5.0
          sed -i "s/Product_Version/6.5.0/g" /usr/lib/logstash-6.5.1/logstash-ei.conf
          sed -i "s^secret-key^${AWSAccessKeySecret}^g" /usr/lib/logstash-6.5.1/logstash-ei.conf
          sed -i "s/access-key/${AWSAccessKeyId}/g" /usr/lib/logstash-6.5.1/logstash-ei.conf
          sed -i "s^ELASTICSEARCH_ENDPOINT^${ElasticSearchEndpoint}^g" /usr/lib/logstash-6.5.1/logstash-ei.conf
          export INSTANCEID=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
          sed -i "s/INSTANCE_ID/$INSTANCEID/g" /usr/lib/logstash-6.5.1/logstash-ei.conf
          sed -i "s/STACK_NAME/${AWS::StackName}/g" /usr/lib/logstash-6.5.1/logstash-ei.conf
          sed -i "s/REGION_NAME/${ElasticSearchRegion}/g" /usr/lib/logstash-6.5.1/logstash-ei.conf
          nohup /usr/lib/logstash-6.5.1/bin/logstash -f /usr/lib/logstash-6.5.1/logstash-ei.conf &
          export PuppetmasterIP=${PuppetMaster.PrivateIp}
          echo "$PuppetmasterIP puppet puppetmaster" >> /etc/hosts
          service puppet restart
          mkdir -p /mnt/efs
          mount -t nfs4 -o nfsvers=4.1 ${WSO2EIEFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
          sleep 100
          export FACTER_profile=ei_integrator650
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              puppet agent -vt >> /var/log/puppetlog.log
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              /opt/puppetlabs/bin/puppet agent -vt >> /var/log/puppetlog.log
          fi
          if [ ! -d "/mnt/efs/deployment/server" ]; then
              mkdir -p /mnt/efs/deployment/server
              cp -r /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/deployment/server /mnt/efs/deployment
          fi
          rm -rf /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/deployment/server
          ln -s /mnt/efs/deployment/server /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/deployment/server
          if [ ! -d "/mnt/efs/tenants" ]; then
              mkdir -p /mnt/efs/tenants
              cp -r /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/tenants /mnt/efs
          fi
          rm -rf /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/tenants
          ln -s /mnt/efs/tenants /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/tenants
          echo "${WSO2EIEFSFileSystem}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          sleep 30
          export ANALYTICS_IP=$(python /usr/local/bin/private_ip_extractor.py ${AWS::Region} ${AWSAccessKeyId} ${AWSAccessKeySecret} WSO2EIAnalyticsWorker)
          sed -i "s/CF_ANALYTICS_IP/$ANALYTICS_IP/g" /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/conf/carbon.xml
          sed -i "s/CF_ANALYTICS_IP/$ANALYTICS_IP/g" /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml
          sed -i "s/CF_ANALYTICS_IP/$ANALYTICS_IP/g" /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml
          /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/bin/integrator.sh start
          ${CustomUserData}
          sleep 30
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              end=$((SECONDS+1800))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                    /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2EINode1AutoScalingGroup --region ${AWS::Region}
                    break
                  fi
              done
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              end=$((SECONDS+1200))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                    /usr/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2EINode1AutoScalingGroup --region ${AWS::Region}
                    break
                  fi
              done
          fi
          service puppet stop
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2EIAnalyticsWorkerAutoScalingGroup
      - WSO2EISecurityGroup
      - WSO2EILoadBalancer
      - WSO2EIVPCInternetGatewayAttachment
      - WSO2EIDBInstance
      - PuppetMaster
  WSO2EINode1AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2EINode1LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      TargetGroupARNs:
        - !Ref WSO2EI9443ALBTargetGroup
        - !Ref WSO2EI8243ALBTargetGroup
        - !Ref WSO2EIServicesALBTargetGroup
      VPCZoneIdentifier:
        - !Ref WSO2EIPrivateSubnet1
      Tags:
        - Key: Name
          Value: WSO2EIInstance1
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: ei
          PropagateAtLaunch: 'true'
        - Key: Environment
          Value: Dev
          PropagateAtLaunch: 'true'
        - Key: ServerType
          Value: 'WSO2'
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT10M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true
    DependsOn:
      - WSO2EILoadBalancer
  WSO2EINode2LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2EIAMIRegionMap
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref WSO2InstanceType
      IamInstanceProfile: !Ref MonitoringInstanceIAMProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2EISecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          export PATH=~/.local/bin:$PATH
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              export DEBIAN_FRONTEND=noninteractive
              apt-get update
              apt install -y puppet nfs-common
              apt install -y python-pip
              pip install boto3
              sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              yum install -y epel-release zip unzip nfs-utils
              yum install -y python-pip
              pip install boto3
              rpm -Uvh https://yum.puppetlabs.com/puppet5/puppet5-release-el-7.noarch.rpm
              yum install -y puppet-agent
              echo $'[main]\nserver = puppet\ncertname = agent2\nenvironment = production\n\runinterval = 1h' > /etc/puppetlabs/puppet/puppet.conf
          fi
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          wget --no-check-certificate --no-proxy 'http://wso2-cloudformation-templates.s3.amazonaws.com/private_ip_extractor.py' -P /usr/local/bin/
          sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          wget https://s3.amazonaws.com/wso2logarchiever/log_archiver/log_archiver.sh
          wget --no-check-certificate --no-proxy 'http://wso2-cloudformation-templates.s3.amazonaws.com/logstash-ei.conf' -P /usr/lib/logstash-6.5.1/
          mv log_archiver.sh /usr/lib/
          export ProductVersion=6.5.0
          sed -i "s/Product_Version/6.5.0/g" /usr/lib/logstash-6.5.1/logstash-ei.conf
          sed -i "s^secret-key^${AWSAccessKeySecret}^g" /usr/lib/logstash-6.5.1/logstash-ei.conf
          sed -i "s/access-key/${AWSAccessKeyId}/g" /usr/lib/logstash-6.5.1/logstash-ei.conf
          sed -i "s^ELASTICSEARCH_ENDPOINT^${ElasticSearchEndpoint}^g" /usr/lib/logstash-6.5.1/logstash-ei.conf
          export INSTANCEID=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
          sed -i "s/INSTANCE_ID/$INSTANCEID/g" /usr/lib/logstash-6.5.1/logstash-ei.conf
          sed -i "s/STACK_NAME/${AWS::StackName}/g" /usr/lib/logstash-6.5.1/logstash-ei.conf
          sed -i "s/REGION_NAME/${ElasticSearchRegion}/g" /usr/lib/logstash-6.5.1/logstash-ei.conf
          nohup /usr/lib/logstash-6.5.1/bin/logstash -f /usr/lib/logstash-6.5.1/logstash-ei.conf &
          export PuppetmasterIP=${PuppetMaster.PrivateIp}
          echo "$PuppetmasterIP puppet puppetmaster" >> /etc/hosts
          service puppet restart
          mkdir -p /mnt/efs
          mount -t nfs4 -o nfsvers=4.1 ${WSO2EIEFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
          sleep 300
          export FACTER_profile=ei_integrator650
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              puppet agent -vt >> /var/log/puppetlog.log
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              /opt/puppetlabs/bin/puppet agent -vt >> /var/log/puppetlog.log
          fi
          if [ ! -d "/mnt/efs/deployment/server" ]; then
              mkdir -p /mnt/efs/deployment/server
              cp -r /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/deployment/server /mnt/efs/deployment
          fi
          rm -rf /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/deployment/server
          ln -s /mnt/efs/deployment/server /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/deployment/server
          if [ ! -d "/mnt/efs/tenants" ]; then
              mkdir -p /mnt/efs/tenants
              cp -r /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/tenants /mnt/efs
          fi
          rm -rf /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/tenants
          ln -s /mnt/efs/tenants /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/tenants
          echo "${WSO2EIEFSFileSystem}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          sleep 30
          export ANALYTICS_IP=$(python /usr/local/bin/private_ip_extractor.py ${AWS::Region} ${AWSAccessKeyId} ${AWSAccessKeySecret} WSO2EIAnalyticsWorker)
          sed -i "s/CF_ANALYTICS_IP/$ANALYTICS_IP/g" /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/conf/carbon.xml
          sed -i "s/CF_ANALYTICS_IP/$ANALYTICS_IP/g" /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/deployment/server/eventpublishers/MessageFlowConfigurationPublisher.xml
          sed -i "s/CF_ANALYTICS_IP/$ANALYTICS_IP/g" /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/repository/deployment/server/eventpublishers/MessageFlowStatisticsPublisher.xml
          /usr/local/wso2/wso2ei/integrator/6.5.0/wso2ei-6.5.0/bin/integrator.sh start
          ${CustomUserData}
          sleep 30
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              end=$((SECONDS+1800))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                    /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2EINode2AutoScalingGroup --region ${AWS::Region}
                    break
                  fi
              done
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              end=$((SECONDS+1200))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                    /usr/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2EINode2AutoScalingGroup --region ${AWS::Region}
                    break
                  fi
              done
          fi
          service puppet stop
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2EIAnalyticsWorkerAutoScalingGroup
      - WSO2EISecurityGroup
      - WSO2EILoadBalancer
      - WSO2EIVPCInternetGatewayAttachment
      - WSO2EIDBInstance
      - PuppetMaster
  WSO2EINode2AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2EINode2LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      TargetGroupARNs:
        - !Ref WSO2EI9443ALBTargetGroup
        - !Ref WSO2EI8243ALBTargetGroup
        - !Ref WSO2EIServicesALBTargetGroup
      VPCZoneIdentifier:
        - !Ref WSO2EIPrivateSubnet2
      Tags:
        - Key: Name
          Value: WSO2EIInstance2
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: ei
          PropagateAtLaunch: 'true'
        - Key: Environment
          Value: Dev
          PropagateAtLaunch: 'true'
        - Key: ServerType
          Value: 'WSO2'
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT10M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true
    DependsOn:
      - WSO2EILoadBalancer
  WSO2EILoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: WSO2 EI ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5701'
          ToPort: '5701'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5701'
          ToPort: '5701'
          CidrIp: 0.0.0.0/0
  WSO2EILoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: EI
      Scheme: internet-facing
      Subnets:
        - !Ref WSO2EIPublicSubnet1
        - !Ref WSO2EIPublicSubnet2
      SecurityGroups:
        - !Ref WSO2EILoadBalancerSecurityGroup
  WSO2EI9443ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /carbon/admin/login.jsp
      HealthCheckPort: 9443
      Matcher:
        HttpCode: 200
      Name: ei-carbon-9443
      Port: 9443
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: stickiness.enabled
        Value: 'true'
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: WSO2EIVPC
      Tags:
      - Key: Name
        Value: ei
  WSO2EI8243ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /services/Version
      HealthCheckPort: 8243
      Matcher:
        HttpCode: 200
      Name: ei-carbon-8243
      Port: 8243
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: stickiness.enabled
        Value: 'true'
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: WSO2EIVPC
      Tags:
      - Key: Name
        Value: ei
  WSO2EI8243ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2EI8243ALBTargetGroup
      Certificates:
        - CertificateArn: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ':server-certificate'
            - /
            - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2EILoadBalancer
      Port: 8243
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
    DependsOn:
      - WSO2EILoadBalancerSecurityGroup
  WSO2EIServicesALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /
      HealthCheckPort: 8280
      Matcher:
        HttpCode: 200
      Name: ei-carbon-8280
      Port: 8280
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: stickiness.enabled
        Value: 'true'
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: WSO2EIVPC
      Tags:
      - Key: Name
        Value: ei
  WSO2EIServicesALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2EIServicesALBTargetGroup
      LoadBalancerArn: !Ref WSO2EILoadBalancer
      Port: 8280
      Protocol: HTTP
  WSO2EI9443ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2EI9443ALBTargetGroup
      Certificates:
        - CertificateArn: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ':server-certificate'
            - /
            - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2EILoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
    DependsOn:
      - WSO2EILoadBalancerSecurityGroup
################# EI ANALYTICS #################
  WSO2EIAnalyticsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupName: WSO2AnalyticsSecurityGroup
      GroupDescription: WSO2 Identity Server Analytics Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4040'
          ToPort: '4040'
          SourceSecurityGroupId: !Ref WSO2EIAnalyticsLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9090'
          ToPort: '9090'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9091'
          ToPort: '9091'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5701'
          ToPort: '5701'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          SourceSecurityGroupId: !Ref WSO2EIAnalyticsLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9643'
          ToPort: '9643'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '7612'
          ToPort: '7612'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '7712'
          ToPort: '7712'
          CidrIp: 0.0.0.0/0
  MonitoringInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - WSO2MonitorMasterAMIRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu1804
      InstanceType: !Ref MonitoringInstanceType
      IamInstanceProfile: !Ref MonitoringInstanceIAMProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: WSO2MonitoringInstance
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          AssociatePublicIpAddress: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2EIPublicSubnet1
          GroupSet:
            - !Ref MonitoringSecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          export PATH=~/.local/bin:$PATH
          export REGION=${AWS::Region}
          sed -i "s/REGION_NAME/$REGION/g" /etc/prometheus/prometheus.yml
          service prometheus restart
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2EISecurityGroup
      - WSO2EILoadBalancer
      - WSO2EIVPCInternetGatewayAttachment
      - WSO2EIDBInstance
      - PuppetMaster
# Analytics WORKER
  WSO2EIAnalyticsWorkerLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2EIAMIRegionMap
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2EIAnalyticsSecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          export PATH=~/.local/bin:$PATH
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              export DEBIAN_FRONTEND=noninteractive
              apt-get update
              apt install -y puppet nfs-common
              apt install -y python-pip
              sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              yum install -y epel-release zip unzip nfs-utils
              yum install -y python-pip
              rpm -Uvh https://yum.puppetlabs.com/puppet5/puppet5-release-el-7.noarch.rpm
              yum install -y puppet-agent
              echo $'[main]\nserver = puppet\ncertname = agent3\nenvironment = production\n\runinterval = 1h' > /etc/puppetlabs/puppet/puppet.conf
          fi
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          export PuppetmasterIP=${PuppetMaster.PrivateIp}
          echo "$PuppetmasterIP puppet puppetmaster" >> /etc/hosts
          wget --no-check-certificate --no-proxy 'http://wso2-cloudformation-templates.s3.amazonaws.com/private_ip_extractor.py' -P /usr/local/bin/
          export FACTER_profile=ei_analytics_worker650
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              puppet agent -vt >> /var/log/puppetlog.log
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              /opt/puppetlabs/bin/puppet agent -vt >> /var/log/puppetlog.log
          fi
          /usr/local/wso2/wso2ei/analytics-worker/6.5.0/wso2ei-6.5.0/wso2/analytics/wso2/worker/bin/carbon.sh start
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2EIAnalyticsWorkerAutoScalingGroup --region ${AWS::Region}
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              /usr/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2EIAnalyticsWorkerAutoScalingGroup --region ${AWS::Region}
          fi
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2EIAnalyticsWorkerAutoScalingGroup --region ${AWS::Region}
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2EIAnalyticsSecurityGroup
      - WSO2EIAnalyticsLoadBalancer
      - WSO2EIVPCInternetGatewayAttachment
      - WSO2EIDBInstance
      - PuppetMaster
  WSO2EIAnalyticsWorkerAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2EIAnalyticsWorkerLaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      VPCZoneIdentifier:
        - !Ref WSO2EIPrivateSubnet1
      Tags:
        - Key: Name
          Value: WSO2EIAnalyticsWorker
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: ei-analytics
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M
    DependsOn:
      - WSO2EIAnalyticsLoadBalancer
# Analyitcs Dashboard
  WSO2EIAnalyticsDashboardLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2EIAMIRegionMap
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2EIAnalyticsSecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          export PATH=~/.local/bin:$PATH
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              export DEBIAN_FRONTEND=noninteractive
              apt-get update
              apt install -y puppet nfs-common
              apt install -y python-pip
              sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              yum install -y epel-release zip unzip nfs-utils
              yum install -y python-pip
              rpm -Uvh https://yum.puppetlabs.com/puppet5/puppet5-release-el-7.noarch.rpm
              yum install -y puppet-agent
              echo $'[main]\nserver = puppet\ncertname = agent4\nenvironment = production\n\runinterval = 1h' > /etc/puppetlabs/puppet/puppet.conf
          fi
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          wget --no-check-certificate --no-proxy 'http://wso2-cloudformation-templates.s3.amazonaws.com/private_ip_extractor.py' -P /usr/local/bin/
          export PuppetmasterIP=${PuppetMaster.PrivateIp}
          echo "$PuppetmasterIP puppet puppetmaster" >> /etc/hosts
          export FACTER_profile=ei_analytics_dashboard650
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              puppet agent -vt >> /var/log/puppetlog.log
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              /opt/puppetlabs/bin/puppet agent -vt >> /var/log/puppetlog.log
          fi
          sleep 30
          /usr/local/wso2/wso2ei/analytics-dashboard/6.5.0/wso2ei-6.5.0/wso2/analytics/wso2/dashboard/bin/carbon.sh start
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2EIAnalyticsDashboardAutoScalingGroup --region ${AWS::Region}
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              /usr/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2EIAnalyticsDashboardAutoScalingGroup --region ${AWS::Region}
          fi
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2EIAnalyticsSecurityGroup
      - WSO2EIAnalyticsLoadBalancer
      - WSO2EIVPCInternetGatewayAttachment
      - WSO2EIDBInstance
      - PuppetMaster
  WSO2EIAnalyticsDashboardAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2EIAnalyticsDashboardLaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      TargetGroupARNs:
        - !Ref WSO2EIDashboardALBTargetGroup
      VPCZoneIdentifier:
        - !Ref WSO2EIPrivateSubnet1
      Tags:
        - Key: Name
          Value: WSO2EIAnalyticsDashboard
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: ei-analytics
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT20M
    DependsOn:
      - WSO2EIAnalyticsLoadBalancer
  WSO2EIAnalyticsLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2EIVPC
      GroupDescription: WSO2 IS Analytics ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9643'
          ToPort: '9643'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4040'
          ToPort: '4040'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5701'
          ToPort: '5701'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9090'
          ToPort: '9090'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9091'
          ToPort: '9091'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '7612'
          ToPort: '7612'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '7712'
          ToPort: '7712'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9611'
          ToPort: '9611'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9711'
          ToPort: '9711'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '9643'
          ToPort: '9643'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4040'
          ToPort: '4040'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5701'
          ToPort: '5701'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9090'
          ToPort: '9090'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9091'
          ToPort: '9091'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '7612'
          ToPort: '7612'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '7712'
          ToPort: '7712'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9611'
          ToPort: '9611'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9711'
          ToPort: '9711'
          CidrIp: 0.0.0.0/0
  WSO2EIAnalyticsLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: EI-Analytics
      Scheme: internet-facing
      Subnets:
        - !Ref WSO2EIPublicSubnet1
        - !Ref WSO2EIPublicSubnet2
      SecurityGroups:
        - !Ref WSO2EIAnalyticsSecurityGroup
  WSO2EIDashboardALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      HealthCheckPath: /portal
      HealthCheckPort: 9643
      Matcher:
        HttpCode: 200
      Name: is-dashboard-9643
      Port: 9643
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: stickiness.enabled
        Value: 'true'
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: WSO2EIVPC
      Tags:
      - Key: Name
        Value: ei-analytics
  WSO2EIDashboardALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2EIDashboardALBTargetGroup
      Certificates:
        - CertificateArn: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ':server-certificate'
            - /
            - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2EIAnalyticsLoadBalancer
      Port: 9643
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
    DependsOn:
      - WSO2EIAnalyticsLoadBalancerSecurityGroup
Outputs:
  EIPortalURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2EIAnalyticsLoadBalancer
          - DNSName
        - ':9643/portal'
    Description: Identity Server Analytics Dashboard
  MgtConsoleUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2EILoadBalancer
          - DNSName
        - '/carbon'
    Description: Integrator Carbon Management Console URL
  CarbonServerUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2EILoadBalancer
          - DNSName
        - '/services'
    Description: Carbon Server URL
  ESBHttpUrl:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WSO2EILoadBalancer
          - DNSName
        - ':8280'
    Description: ESB HTTP URL
  ESBHttpsUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2EILoadBalancer
          - DNSName
        - ':8243'
    Description: ESB HTTPSURL
  MonitoringHttpUrl:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - MonitoringInstance
          - PublicDnsName
        - ':3000/d/dxHncuHS/'
    Description: Monitoring HTTP URL
  EIStackName:
    Value: !Ref AWS::StackName
    Description: Stack Name of the EI cluster
  EIStackId:
    Value: !Ref AWS::StackId
    Description: Stack ID of the EI cluster
Parameters:
  AWSAccessKeyId:
    Type: String
  AWSAccessKeySecret:
    Type: String
  KeyPairName:
    Description: >-
      The private key used to log in to instances through SSH
    Type: 'AWS::EC2::KeyPair::KeyName'
  CertificateName:
    Description: A valid SSL certificate used for HTTPS
    Type: String
    MinLength: 1
  WSO2InstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
    ConstraintDescription: Must be a valid EC2 instance type
  MonitoringInstanceType:
    Type: String
    Default: t2.large
  CustomUserData:
    Type: String
    Default: "echo"
  JDK:
    Type: String
    Default: "OPEN_JDK8"
    AllowedValues:
      - "OPEN_JDK8"
      - "CORRETTO_JDK8"
  ProductVersion:
    Type: String
    Default: 6.5.0
    AllowedValues:
      - 6.5.0
  InternalPrepareForTest:
    Type: String
    Default: "False"
    AllowedValues:
      - "False"
      - "True"
  WUMPassword:
    Type: String
    Default: ""
    NoEcho: true
  WUMUsername:
    Type: String
    Default: ""
  DBUsername:
    Type: String
    MinLength: 4
    AllowedPattern: '[A-Za-z0-9\-]+'
  DBPassword:
    Type: String
    MinLength: 8
    NoEcho: true
  DBAllocationStorage:
    Description: Provide storage size in Gigabytes
    Type: Number
    Default: 20
  ElasticSearchEndpoint:
    Type: String
    Default: ""
  DBInstanceType:
    Description: If the selected DB Engine is "SQL Server", please use "db.m4.large" as instance type
    Type: String
    Default: db.t2.medium
    AllowedValues:
      - db.t2.medium
      - db.t2.large
      - db.t2.xlarge
      - db.t2.2xlarge
      - db.m3.medium
      - db.m3.large
      - db.m3.xlarge
      - db.m3.2xlarge
      - db.m4.large
  DB:
    Type: String
    Default: MySQL-5.7
    AllowedValues:
      - MySQL-5.6
      - MySQL-5.7
      - Postgres-9.6
      - Postgres-10.5
      - Oracle-SE1-11.2
      - Oracle-SE2-12.1
      - SQLServer-SE-13.00
      - SQLServer-SE-14.00
  OperatingSystem:
    Type: String
    Default: Ubuntu1804
    AllowedValues:
      - Ubuntu1804
      - CentOS7
  ElasticSearchRegion:
    Type: String
    Default: "us-east-1"
    AllowedValues:
      - "us-east-1"
      - "us-east-2"
      - "us-west-1"
      - "us-west-2"
      - "ap-southeast-2"
      - "eu-west-1"
Mappings:
  WSO2PuppetMasterRegionMap:
    ap-southeast-2:
      Ubuntu1804: ami-0cd6c2155e5313646
    eu-west-1:
      Ubuntu1804: ami-0e71c555e6ac1c684
    us-east-1:
      Ubuntu1804: ami-0d52b3d6632f75844
    us-east-2:
      Ubuntu1804: ami-033ee04ed21a6aaa9
    us-west-1:
      Ubuntu1804: ami-007fa39fcd1587cd7
    us-west-2:
      Ubuntu1804: ami-086840efee4e718e9
  WSO2EIAMIRegionMap:
    ap-southeast-2:
      CentOS7: ami-01d73bdb3a728a26d
      Ubuntu1804: ami-0829163a4c39d3304
    eu-west-1:
      CentOS7: ami-0f51ca19f60e60eba
      Ubuntu1804: ami-050b6a83093ff7e6f
    us-east-1:
      CentOS7: ami-0fb2c4a3037d685da
      Ubuntu1804: ami-09f144546aca6bdb4
    us-east-2:
      CentOS7: ami-0f7ef44fbf4f4fff0
      Ubuntu1804: ami-018581da66d131f90
    us-west-1:
      CentOS7: ami-06221f036350a2b23
      Ubuntu1804: ami-0eadf94ff249cae5b
    us-west-2:
      CentOS7: ami-0bb117a29addae3c0
      Ubuntu1804: ami-03e1adf2440096fb9
  WSO2MonitorMasterAMIRegionMap:
    ap-southeast-2:
      Ubuntu1804: ami-07db0bd7843431ecc
    eu-west-1:
      Ubuntu1804: ami-08c5f1ea8c1e595c5
    us-east-1:
      Ubuntu1804: ami-0ca663a3c8ebd88d3
    us-east-2:
      Ubuntu1804: ami-063864b50ccf81441
    us-west-1:
      Ubuntu1804: ami-0902b0e7f264e52e0
    us-west-2:
      Ubuntu1804: ami-009e0a594bc3acf10
  DBEngineMap:
    MySQL-5.7:
      DBEngine: "mysql_5.7"
    MySQL-5.6:
      DBEngine: "mysql_5.6"
    Postgres-9.6:
      DBEngine: "postgres_9.6"
    Postgres-10.5:
      DBEngine: "postgres_10.5"
    SQLServer-SE-13.00:
      DBEngine: "sqlserver-se_13.00"
    SQLServer-SE-14.00:
      DBEngine: "sqlserver-se_14.00"
    Oracle-SE1-11.2:
      DBEngine: "oracle-se1_11.2"
    Oracle-SE2-12.1:
      DBEngine: "oracle-se2_12.1"
Conditions:
  UseSQLServerDB: !Equals [sqlserver-se, !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]]
  UseLicensedVersion: !Or [ !Equals [sqlserver, !Select [0, !Split ["-", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]], !Equals [oracle, !Select [0, !Split ["-", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]] ]
